{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Resampling and Frequency Concersion\n",
    "### Resampling refers to the process of converting a time series from one frequency to another. \n",
    "\n",
    "**DOWN SAMPLING**: Aggregating higher frequency data to lower frequency\n",
    "\n",
    "**UP SAMPLING**: Converting lower frequency data to higher frequency.\n",
    "\n",
    "**OHLC(Open High Low Close) RESAMPLING** Grouping the data into bins and providing Open, High, Low and close values for the bin\n",
    "\n",
    "**LATERAL SAMPLING** : Not all resampling falls into above categories for ex: converting W-MON (Monday of everyweek) to W-FRI ( Fridays of everyweek), is neither up or down sampling. Here i would refer to these as lateral sampling.\n",
    "\n",
    "Pandas objects have `resample` method which works on *Split-Aggregate-combine* methodology. I will explain this with a simple example"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import datetime as datetime"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2020-01-01    0.075042\n",
       "2020-01-02   -0.489969\n",
       "2020-01-03   -0.277738\n",
       "2020-01-04    0.233613\n",
       "2020-01-05    0.610697\n",
       "                ...   \n",
       "2020-04-05   -0.261751\n",
       "2020-04-06   -0.371990\n",
       "2020-04-07   -0.784204\n",
       "2020-04-08    1.219822\n",
       "2020-04-09   -1.307929\n",
       "Freq: D, Length: 100, dtype: float64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "series_range = pd.date_range('2020-01-01' , periods = 100 , freq = 'D')\n",
    "time_series = pd.Series(np.random.randn(100), index = series_range)\n",
    "time_series"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## DOWNSAMPLING\n",
    "### This time_series now can be split into buckets of `M` *months* and then aggregated with `mean` being applied to each aggregated group."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2020-01-31    0.116350\n",
       "2020-02-29   -0.000181\n",
       "2020-03-31    0.237593\n",
       "2020-04-30   -0.520837\n",
       "Freq: M, dtype: float64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "time_series.resample('M').mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### After each timestamp or peiod is aggreated into a bucket, the bucket can be refered as timestamp i.e. particular time or to a timeperiod i.e. a period covering multiple timestamps. In above example, we have bucketed all the timestamps i.e. daily label into a group corresponding to all lables for a month. Now we can call this bucket a period refering to each month instead of tagging a time stamp to this if we want. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2020-01    3.606865\n",
       "2020-02   -0.005240\n",
       "2020-03    7.365380\n",
       "2020-04   -4.687534\n",
       "Freq: M, dtype: float64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "time_series.resample('M', kind = 'period').sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### The frequency that is selected defines how the data is binned a few things to think about when doing this - \n",
    "\n",
    "+ At the edge of bin, which bin does a data point fall into ex: for a fortnighly frequency which bin does 16th fall in?\n",
    "+ Once the data is bucketed, what do we tag this bucket as ex: for monthly frequency, should we tag this as start of month date or end of month date or just convert this bucket into a preiod as described above ? \n",
    "\n",
    "#### Fortunately we can pass parameters in resmple method to have control over all these things. Lets see and understand this via an example."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2020-01-31    31\n",
       "2020-02-29    29\n",
       "2020-03-31    31\n",
       "2020-04-30     9\n",
       "Freq: M, dtype: int64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "time_series.resample('M',closed = 'right', label = 'right').count()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Open-High-Low-Close a.k.a. OHLC resampling\n",
    "#### In finance one often see four values being provided for  stock prices - Opening price, High price, Low Price and closing price. Resample method has a very simple way to getting this data from any time series object. lets see via a simple example where the time series object giving daily prices is aggregated over a week and Open, high, low and close prices are gathered in one simple and elegent command"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>open</th>\n",
       "      <th>high</th>\n",
       "      <th>low</th>\n",
       "      <th>close</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2020-01-05</th>\n",
       "      <td>0.075042</td>\n",
       "      <td>0.610697</td>\n",
       "      <td>-0.489969</td>\n",
       "      <td>0.610697</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-01-12</th>\n",
       "      <td>-1.305752</td>\n",
       "      <td>2.005733</td>\n",
       "      <td>-1.305752</td>\n",
       "      <td>1.245953</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-01-19</th>\n",
       "      <td>1.072627</td>\n",
       "      <td>1.072627</td>\n",
       "      <td>-1.143830</td>\n",
       "      <td>0.542699</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-01-26</th>\n",
       "      <td>-0.372541</td>\n",
       "      <td>0.560016</td>\n",
       "      <td>-1.293340</td>\n",
       "      <td>0.261313</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-02-02</th>\n",
       "      <td>1.262763</td>\n",
       "      <td>1.273093</td>\n",
       "      <td>-1.074520</td>\n",
       "      <td>-0.334111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-02-09</th>\n",
       "      <td>0.111953</td>\n",
       "      <td>1.650624</td>\n",
       "      <td>-0.851175</td>\n",
       "      <td>1.650624</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-02-16</th>\n",
       "      <td>-0.888158</td>\n",
       "      <td>1.532881</td>\n",
       "      <td>-1.198648</td>\n",
       "      <td>1.532881</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-02-23</th>\n",
       "      <td>-0.672995</td>\n",
       "      <td>0.973976</td>\n",
       "      <td>-1.085567</td>\n",
       "      <td>0.973976</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-03-01</th>\n",
       "      <td>0.911818</td>\n",
       "      <td>0.911818</td>\n",
       "      <td>-1.074035</td>\n",
       "      <td>-1.074035</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-03-08</th>\n",
       "      <td>-0.628360</td>\n",
       "      <td>2.134214</td>\n",
       "      <td>-1.441225</td>\n",
       "      <td>-1.441225</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-03-15</th>\n",
       "      <td>0.630344</td>\n",
       "      <td>0.715244</td>\n",
       "      <td>-0.506660</td>\n",
       "      <td>-0.161003</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-03-22</th>\n",
       "      <td>1.265955</td>\n",
       "      <td>1.633382</td>\n",
       "      <td>-2.321661</td>\n",
       "      <td>1.152942</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-03-29</th>\n",
       "      <td>1.462361</td>\n",
       "      <td>1.462361</td>\n",
       "      <td>-0.666387</td>\n",
       "      <td>-0.260632</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-04-05</th>\n",
       "      <td>-1.732899</td>\n",
       "      <td>0.386864</td>\n",
       "      <td>-1.732899</td>\n",
       "      <td>-0.261751</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-04-12</th>\n",
       "      <td>-0.371990</td>\n",
       "      <td>1.219822</td>\n",
       "      <td>-1.307929</td>\n",
       "      <td>-1.307929</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                open      high       low     close\n",
       "2020-01-05  0.075042  0.610697 -0.489969  0.610697\n",
       "2020-01-12 -1.305752  2.005733 -1.305752  1.245953\n",
       "2020-01-19  1.072627  1.072627 -1.143830  0.542699\n",
       "2020-01-26 -0.372541  0.560016 -1.293340  0.261313\n",
       "2020-02-02  1.262763  1.273093 -1.074520 -0.334111\n",
       "2020-02-09  0.111953  1.650624 -0.851175  1.650624\n",
       "2020-02-16 -0.888158  1.532881 -1.198648  1.532881\n",
       "2020-02-23 -0.672995  0.973976 -1.085567  0.973976\n",
       "2020-03-01  0.911818  0.911818 -1.074035 -1.074035\n",
       "2020-03-08 -0.628360  2.134214 -1.441225 -1.441225\n",
       "2020-03-15  0.630344  0.715244 -0.506660 -0.161003\n",
       "2020-03-22  1.265955  1.633382 -2.321661  1.152942\n",
       "2020-03-29  1.462361  1.462361 -0.666387 -0.260632\n",
       "2020-04-05 -1.732899  0.386864 -1.732899 -0.261751\n",
       "2020-04-12 -0.371990  1.219822 -1.307929 -1.307929"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "time_series.resample('W').ohlc()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Upsampling\n",
    "#### For upsampling there is no concept of aggregation. In fact since more datapoints are create, we end with missing data. Lets work though a simple example to understand these concepts -\n",
    "    + use `asfreq` method to onvert to higher frequency without any registration."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "Wind_speed = pd.DataFrame(np.random.randn(2,4)*100 ,\n",
    "                           index = pd.date_range('20-01-2018',periods = 2, freq = 'W-TUE'),\n",
    "                           columns = ['New Delhi','Hyderabad','Bangalore','Mumbai'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>New Delhi</th>\n",
       "      <th>Hyderabad</th>\n",
       "      <th>Bangalore</th>\n",
       "      <th>Mumbai</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2018-01-23</th>\n",
       "      <td>-58.136427</td>\n",
       "      <td>-61.913635</td>\n",
       "      <td>85.445010</td>\n",
       "      <td>26.313004</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-24</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-25</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-26</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-27</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-28</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-29</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-30</th>\n",
       "      <td>40.696161</td>\n",
       "      <td>-99.710777</td>\n",
       "      <td>-136.253376</td>\n",
       "      <td>-53.216092</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            New Delhi  Hyderabad   Bangalore     Mumbai\n",
       "2018-01-23 -58.136427 -61.913635   85.445010  26.313004\n",
       "2018-01-24        NaN        NaN         NaN        NaN\n",
       "2018-01-25        NaN        NaN         NaN        NaN\n",
       "2018-01-26        NaN        NaN         NaN        NaN\n",
       "2018-01-27        NaN        NaN         NaN        NaN\n",
       "2018-01-28        NaN        NaN         NaN        NaN\n",
       "2018-01-29        NaN        NaN         NaN        NaN\n",
       "2018-01-30  40.696161 -99.710777 -136.253376 -53.216092"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Wind_speed.resample('D').asfreq()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### you can use `ffill()` method to fill up the missing values easily"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>New Delhi</th>\n",
       "      <th>Hyderabad</th>\n",
       "      <th>Bangalore</th>\n",
       "      <th>Mumbai</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2018-01-23</th>\n",
       "      <td>-58.136427</td>\n",
       "      <td>-61.913635</td>\n",
       "      <td>85.445010</td>\n",
       "      <td>26.313004</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-24</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-25</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-26</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-27</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-28</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-29</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-30</th>\n",
       "      <td>40.696161</td>\n",
       "      <td>-99.710777</td>\n",
       "      <td>-136.253376</td>\n",
       "      <td>-53.216092</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            New Delhi  Hyderabad   Bangalore     Mumbai\n",
       "2018-01-23 -58.136427 -61.913635   85.445010  26.313004\n",
       "2018-01-24        NaN        NaN         NaN        NaN\n",
       "2018-01-25        NaN        NaN         NaN        NaN\n",
       "2018-01-26        NaN        NaN         NaN        NaN\n",
       "2018-01-27        NaN        NaN         NaN        NaN\n",
       "2018-01-28        NaN        NaN         NaN        NaN\n",
       "2018-01-29        NaN        NaN         NaN        NaN\n",
       "2018-01-30  40.696161 -99.710777 -136.253376 -53.216092"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Wind_speed.resample('D').asfreq()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>New Delhi</th>\n",
       "      <th>Hyderabad</th>\n",
       "      <th>Bangalore</th>\n",
       "      <th>Mumbai</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2018-01-23</th>\n",
       "      <td>-58.136427</td>\n",
       "      <td>-61.913635</td>\n",
       "      <td>85.445010</td>\n",
       "      <td>26.313004</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-24</th>\n",
       "      <td>-58.136427</td>\n",
       "      <td>-61.913635</td>\n",
       "      <td>85.445010</td>\n",
       "      <td>26.313004</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-25</th>\n",
       "      <td>-58.136427</td>\n",
       "      <td>-61.913635</td>\n",
       "      <td>85.445010</td>\n",
       "      <td>26.313004</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-26</th>\n",
       "      <td>-58.136427</td>\n",
       "      <td>-61.913635</td>\n",
       "      <td>85.445010</td>\n",
       "      <td>26.313004</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-27</th>\n",
       "      <td>-58.136427</td>\n",
       "      <td>-61.913635</td>\n",
       "      <td>85.445010</td>\n",
       "      <td>26.313004</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-28</th>\n",
       "      <td>-58.136427</td>\n",
       "      <td>-61.913635</td>\n",
       "      <td>85.445010</td>\n",
       "      <td>26.313004</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-29</th>\n",
       "      <td>-58.136427</td>\n",
       "      <td>-61.913635</td>\n",
       "      <td>85.445010</td>\n",
       "      <td>26.313004</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-30</th>\n",
       "      <td>40.696161</td>\n",
       "      <td>-99.710777</td>\n",
       "      <td>-136.253376</td>\n",
       "      <td>-53.216092</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            New Delhi  Hyderabad   Bangalore     Mumbai\n",
       "2018-01-23 -58.136427 -61.913635   85.445010  26.313004\n",
       "2018-01-24 -58.136427 -61.913635   85.445010  26.313004\n",
       "2018-01-25 -58.136427 -61.913635   85.445010  26.313004\n",
       "2018-01-26 -58.136427 -61.913635   85.445010  26.313004\n",
       "2018-01-27 -58.136427 -61.913635   85.445010  26.313004\n",
       "2018-01-28 -58.136427 -61.913635   85.445010  26.313004\n",
       "2018-01-29 -58.136427 -61.913635   85.445010  26.313004\n",
       "2018-01-30  40.696161 -99.710777 -136.253376 -53.216092"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Wind_speed.resample('D').ffill()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>New Delhi</th>\n",
       "      <th>Hyderabad</th>\n",
       "      <th>Bangalore</th>\n",
       "      <th>Mumbai</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2018-01-23</th>\n",
       "      <td>-58.136427</td>\n",
       "      <td>-61.913635</td>\n",
       "      <td>85.445010</td>\n",
       "      <td>26.313004</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-24</th>\n",
       "      <td>-58.136427</td>\n",
       "      <td>-61.913635</td>\n",
       "      <td>85.445010</td>\n",
       "      <td>26.313004</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-25</th>\n",
       "      <td>-58.136427</td>\n",
       "      <td>-61.913635</td>\n",
       "      <td>85.445010</td>\n",
       "      <td>26.313004</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-26</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-27</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-28</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-29</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-30</th>\n",
       "      <td>40.696161</td>\n",
       "      <td>-99.710777</td>\n",
       "      <td>-136.253376</td>\n",
       "      <td>-53.216092</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            New Delhi  Hyderabad   Bangalore     Mumbai\n",
       "2018-01-23 -58.136427 -61.913635   85.445010  26.313004\n",
       "2018-01-24 -58.136427 -61.913635   85.445010  26.313004\n",
       "2018-01-25 -58.136427 -61.913635   85.445010  26.313004\n",
       "2018-01-26        NaN        NaN         NaN        NaN\n",
       "2018-01-27        NaN        NaN         NaN        NaN\n",
       "2018-01-28        NaN        NaN         NaN        NaN\n",
       "2018-01-29        NaN        NaN         NaN        NaN\n",
       "2018-01-30  40.696161 -99.710777 -136.253376 -53.216092"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Wind_speed.resample('D').ffill(limit = 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
